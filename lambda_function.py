import boto3
import json
import pandas as pd
from dataclasses import dataclass
from retrieve_data_helper import DataRetriever
from call_llm_model_helper import LLMModelCaller
from langchain.prompts import PromptTemplate
from s3_helper import S3Handler


@dataclass
class Config:
    # source_bucket: str
    # source_key: str
    target_bucket: str
    vector_store_bucket: str
    vector_store_key: str
    model_id: str
    region_name: str
    embed_model_id: str
    n_neighbors: int
    template_string: str
    

config = Config(
    # source_bucket="akashdemos3bucket",
    # source_key="multiple_questions.xlsx",
    target_bucket="akashdemos3bucket",
    vector_store_bucket="akashaudio",
    vector_store_key="vector_store.csv",
    model_id="anthropic.claude-3-5-sonnet-20240620-v1:0",
    region_name="us-east-1",
    embed_model_id="amazon.titan-embed-text-v1",
    n_neighbors=10,  # Number of nearest neighbors to retrieve from the vector database for similarity search
    template_string="""You are an AI assistant working for Kaizen Organization. Your task is to answer questions based on the provided data. Follow these steps to ensure accuracy and relevance:

Question: {question}
Data: {data}

1. **Understand the Question**: Carefully read the question to grasp what information is being sought.
2. **Analyze the Data**: Examine the provided data thoroughly to identify the most relevant piece of information that directly answers the question.
3. **Extract the Answer**: Select the single most relevant piece of information from the data that answers the question. If the answer cannot be found in the data, clearly state "The information required to answer is missing from the data."
4. make sure to extract correct Serial_number 


Please ensure that your response is in JSON format with the following structure. Include only the most relevant details, formatted as a single JSON object. 

Your response should be in this exact format:

{{
    "user_question": "{question}",
    "Serial_number": 5,
    "Yes/No": "Yes",
    "Answer": "The relevant answer based on the data.",
    "Owner": "Name of the person or department responsible",
    "Category": "Category of the information",
    "Subsidiaries": "Name of the subsidiary, if applicable",
    "Last Reviewed": "Date of the last review"
}}
If the information required to answer is missing from the data, use the following JSON format:

{{
    "user_question": "{question}",
    "Serial_number": Not Available,
    "Yes/No": "No",
    "Answer": "The information required to answer is missing from the data. Please provide more relevant data in the prompt",
    "Owner": "Not Available",
    "Category": "Not Available",
    "Subsidiaries": "Not Available",
    "Last Reviewed": "Not Available"
}}


Write only the JSON output and nothing more. Do not include additional text, explanations, or formatting. Ensure the output is a single JSON object that aligns with the structure provided. Here is the JSON output:
"""
)



def parse_json(json_str):
    """
    Parse a JSON string.
    Parameters:
    json_str (str): The JSON string to be parsed.
    Returns:
    dict: The parsed JSON object.
    """
    try:
        return json.loads(json_str)
    except json.JSONDecodeError:
        return None


def get_answer(query: str, config: Config) -> str:
    """
    Retrieve the best answer for a given query using the specified model.
    Parameters:
    query (str): The input query.
    model_id (str): The ID of the model used for generating the answer.
    Returns:
    str: The best answer generated by the model.
    """
    retriever = DataRetriever(config)
    retrieved_data = retriever.retrieve_data(query)
    # print(retrieved_data)
    llm_caller = LLMModelCaller(config)
    prompt = PromptTemplate(input_variables=["question", "data"], template=config.template_string)
    final_prompt = prompt.format(question=query, data=retrieved_data)
    best_answer = llm_caller.question_answer(final_prompt)
    return best_answer
    

def lambda_handler(event, context):
    s3_client_query = boto3.client("s3")
    source_bucket = event['Records'][0]['s3']['bucket']['name']
    source_key = event['Records'][0]['s3']['object']['key']
    print(f"source bucket is {source_bucket}")
    response = s3_client_query.get_object(Bucket=source_bucket, Key=source_key)
    query_file_content = response['Body'].read()
    data_frame = pd.read_excel(BytesIO(query_file_content))
    top_50 = data_frame["query"].iloc[:]
    
    # Process queries and get answers
    data_frame["best_answer"] = top_50.apply(lambda q: get_answer(q, config))
    data = data_frame["best_answer"].iloc[:]
    data["one_rephrased_best_answer"] = data.apply(parse_json)
    best_answer_df = pd.json_normalize(data['one_rephrased_best_answer'])
    
    # Save the results to S3
    s3_handler = S3Handler(config)
    s3_handler.save_data_to_s3(best_answer_df)